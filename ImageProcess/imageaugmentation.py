# -*- coding: utf-8 -*-
"""ImageAugmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Vk6OBWwoYomqI36TrxrLOZt_GkprE7u
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow 
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from matplotlib.pyplot import imread, imshow, subplots, show


def plot(data_generator):
    #Plots 4 images generated by an object of the ImageDataGenerator class.
    data_generator.fit(images)
    image_iterator = data_generator.flow(images)
    
    # Plot the images given by the iterator
    fig, rows = subplots(nrows=1, ncols=4, figsize=(18,18))
    for row in rows:
        row.imshow(image_iterator.next()[0].astype('int'))
        row.axis('off')
    show()
    

image = imread('image.JPG')

# Creating a dataset which contains just one image.
images = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))

imshow(images[0])
show()

#image rotation 
data_generator = ImageDataGenerator(rotation_range=90)
plot(data_generator)

#width shifting 
data_generator = ImageDataGenerator(width_shift_range=0.3)
plot(data_generator)

#height shifting 
data_generator = ImageDataGenerator(height_shift_range=0.3)
plot(data_generator)

#brightness
data_generator = ImageDataGenerator(brightness_range=(0.1, 0.9))
plot(data_generator)

#shift intensity 
data_generator = ImageDataGenerator(shear_range=45.0)
plot(data_generator)

#verticle flip 
data_generator = ImageDataGenerator(vertical_flip=True)
plot(data_generator)

#nearest 
'''
This is the default option where the closest pixel value is chosen and repeated for all the empty values.
(E.g. aaaaaaaa|abcd|dddddddd)
'''
data_generator = ImageDataGenerator(width_shift_range=0.3, fill_mode='nearest')
plot(data_generator)

#reflect 
data_generator = ImageDataGenerator(width_shift_range=0.3, fill_mode='reflect')
plot(data_generator)

#wrap 
data_generator = ImageDataGenerator(width_shift_range=0.3, fill_mode='wrap')
plot(data_generator)