# -*- coding: utf-8 -*-
"""predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QV3QMAi0TMcxmt40DzBy7xeQdnT_CsIc
"""

# Commented out IPython magic to ensure Python compatibility.
#For installing libraries, if already installed do not: do not run this section

# !pip install git+https://github.com/huggingface/transformers
# !git clone https://github.com/huggingface/transformers
# !pwd
# # %ls
# # %cd transformers
# !python setup.py install
# # %cd ..
# !pip install pytorch_lightning

#only necessary for accessing drive file

from google.colab import drive
drive.mount('/content/drive')

from transformers import AutoFeatureExtractor, AutoImageProcessor, AutoModelForObjectDetection
import pytorch_lightning as pl
import torchvision.transforms as transforms
import torch
from PIL import Image
import requests

feature_extractor = AutoImageProcessor.from_pretrained("hustvl/yolos-small")
id2label = {0: 'plants', 1: 'daisy', 2: 'dandelion', 3: 'rose', 4: 'sunflower', 5: 'tulip'}

#model class
class Yolo(pl.LightningModule):

    def __init__(self, lr, lr_backbone, weight_decay, dict_label):
        super().__init__()
        self.model = AutoModelForObjectDetection.from_pretrained(
            pretrained_model_name_or_path="hustvl/yolos-small", 
            num_labels=len(id2label),
            ignore_mismatched_sizes=True
        )
        
        self.lr = lr
        self.lr_backbone = lr_backbone
        self.weight_decay = weight_decay

    def forward(self, pixel_values):
        return self.model(pixel_values=pixel_values)

    def common_step(self, batch, batch_idx):
        pixel_values = batch["pixel_values"]
        labels = [{k: v.to(self.device) for k, v in t.items()} for t in batch["labels"]]

        outputs = self.model(pixel_values=pixel_values, labels=labels)

        loss = outputs.loss
        loss_dict = outputs.loss_dict

        return loss, loss_dict

    def training_step(self, batch, batch_idx):
        loss, loss_dict = self.common_step(batch, batch_idx)     
        # logs metrics for each training_step, and the average across the epoch
        self.log("training_loss", loss)
        for k,v in loss_dict.items():
            self.log("train_" + k, v.item())

        return loss

    def validation_step(self, batch, batch_idx):
        loss, loss_dict = self.common_step(batch, batch_idx)     
        self.log("validation/loss", loss)
        for k, v in loss_dict.items():
            self.log("validation_" + k, v.item())
            
        return loss

    def configure_optimizers(self):
        # DETR authors decided to use different learning rate for backbone
        # you can learn more about it here: 
        # - https://github.com/facebookresearch/detr/blob/3af9fa878e73b6894ce3596450a8d9b89d918ca9/main.py#L22-L23
        # - https://github.com/facebookresearch/detr/blob/3af9fa878e73b6894ce3596450a8d9b89d918ca9/main.py#L131-L139
        param_dicts = [
            {
                "params": [p for n, p in self.named_parameters() if "backbone" not in n and p.requires_grad]},
            {
                "params": [p for n, p in self.named_parameters() if "backbone" in n and p.requires_grad],
                "lr": self.lr_backbone,
            },
        ]
        return torch.optim.AdamW(param_dicts, lr=self.lr, weight_decay=self.weight_decay)
#loads model
reload_model = Yolo.load_from_checkpoint("/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/model.ckpt", lr=1e-4, lr_backbone=1e-5, weight_decay=1e-4, dict_label=id2label).to("cuda")

#Beginning of object detection
url = '/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/Data/flowers/daisy/8718637649_87a0d85190_n.jpg'

image = Image.open(url)
transform = transforms.Compose([transforms.PILToTensor()])
tensor = transform(image).to("cuda")

inputs = feature_extractor(images=tensor, return_tensors="pt").to("cuda")
inputs = inputs.to("cuda")

outputs = reload_model(**inputs)

# convert outputs (bounding boxes and class logits) to COCO API
target_sizes = torch.tensor([image.size[::-1]])
results = feature_extractor.post_process_object_detection(outputs, threshold=0.7, target_sizes=target_sizes)[0]

#String in form: "score label x1 y1 w h"
#new line -> another box was found
#(x1,y1) = top left
#(x2,y2) = bottom right
#w = x2-x1
#h = y2-y2
output_string = ""

#replace this with returning proper string
for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = [round(i, 2) for i in box.tolist()]
    print(
        f"Detected {id2label[label.item()]} with confidence "
        f"{round(score.item(), 3)} at location {box}"
    )
    output_string.append(f"{round(score.item(), 3)} {id2label[label.item()]} {box[0]} {box[1]} {box[2]} - {box[0]} {box[3] - box[1]}\n" )