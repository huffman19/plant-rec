# -*- coding: utf-8 -*-
"""yolos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109oPuWjSiUCeAk9QXA6oFXFTLol0f_9u

**Transformers setup**
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install git+https://github.com/huggingface/transformers
!git clone https://github.com/huggingface/transformers
!pwd
# %ls
# %cd transformers
!python setup.py install
# %cd ..

!git clone https://github.com/huggingface/transformers

# Commented out IPython magic to ensure Python compatibility.
!pwd
# %ls
# %cd transformers

!python setup.py install

"""**Datasets Setup**"""

# Commented out IPython magic to ensure Python compatibility.
!pip install git+https://github.com/huggingface/datasets.git
!git clone https://github.com/huggingface/datasets.git
!pwd
# %ls
# %cd datasets
!python setup.py install

!git clone https://github.com/huggingface/datasets.git

# Commented out IPython magic to ensure Python compatibility.
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
!pwd
# %ls
# %cd datasets

!python setup.py install

"""**Using Libraries**

Training Model
"""

!pip install roboflow
!pip install pytorch_lightning
!python3 -m pip install wandb

from roboflow import Roboflow
rf = Roboflow(api_key="wOqbDEbvHPTczhPziPHK")
project = rf.workspace("plantrecognition-kd7na").project("plant-recognition-wbhud")
dataset = project.version(2).download("coco")

import torchvision
import os

class CocoDetection(torchvision.datasets.CocoDetection):
    def __init__(self, img_folder, feature_extractor, train=True):
        ann_file = os.path.join(img_folder, "_annotations.coco.json")
        super(CocoDetection, self).__init__(img_folder, ann_file)
        self.feature_extractor = feature_extractor

    def __getitem__(self, idx):
        # read in PIL image and target in COCO format
        img, target = super(CocoDetection, self).__getitem__(idx)
        
        # preprocess image and target (converting target to DETR format, resizing + normalization of both image and target)
        image_id = self.ids[idx]
        target = {'image_id': image_id, 'annotations': target}
        encoding = self.feature_extractor(images=img, annotations=target, return_tensors="pt")
        pixel_values = encoding["pixel_values"].squeeze() # remove batch dimension
        target = encoding["labels"][0] # remove batch dimension

        return pixel_values, target

from transformers import AutoFeatureExtractor, AutoImageProcessor

# feature_extractor = AutoFeatureExtractor.from_pretrained("hustvl/yolos-small", size=512, max_size=864)
feature_extractor = AutoFeatureExtractor.from_pretrained("hustvl/yolos-small")

train_dataset = CocoDetection(img_folder=(dataset.location + '/train'), feature_extractor=feature_extractor)
val_dataset = CocoDetection(img_folder=(dataset.location + '/valid'), feature_extractor=feature_extractor, train=False)

print("Number of training examples:", len(train_dataset))
print("Number of validation examples:", len(val_dataset))

from torch.utils.data import DataLoader

def collate_fn(batch):
  pixel_values = [item[0] for item in batch]
  encoding = feature_extractor.pad(pixel_values, return_tensors="pt")
  labels = [item[1] for item in batch]
  batch = {}
  batch['pixel_values'] = encoding['pixel_values']
  # batch['pixel_mask'] = encoding['pixel_mask']
  batch['labels'] = labels
  return batch

TRAIN_DATALOADER = DataLoader(dataset=train_dataset, collate_fn=collate_fn, batch_size=4, shuffle=True)
VAL_DATALOADER = DataLoader(dataset=val_dataset, collate_fn=collate_fn, batch_size=1)

import pytorch_lightning as pl
from transformers import AutoModelForObjectDetection
import torchmetrics
import torch

categories = train_dataset.coco.cats
id2label = {k: v['name'] for k,v in categories.items()}

class Yolo(pl.LightningModule):

    def __init__(self, lr, lr_backbone, weight_decay, num_classes):
        super().__init__()
        self.model = AutoModelForObjectDetection.from_pretrained(
            pretrained_model_name_or_path="hustvl/yolos-small", 
            num_labels=len(id2label),
            ignore_mismatched_sizes=True
        )
        
        self.lr = lr
        self.lr_backbone = lr_backbone
        self.weight_decay = weight_decay

    def forward(self, pixel_values):
        return self.model(pixel_values=pixel_values)

    def common_step(self, batch, batch_idx):
        pixel_values = batch["pixel_values"]
        labels = [{k: v.to(self.device) for k, v in t.items()} for t in batch["labels"]]

        outputs = self.model(pixel_values=pixel_values, labels=labels)
        loss = outputs.loss
        loss_dict = outputs.loss_dict

        return loss, loss_dict

    def training_step(self, batch, batch_idx):
        loss, loss_dict = self.common_step(batch, batch_idx)     
        # logs metrics for each training_step, and the average across the epoch
        self.log("training_loss", loss)
        for k,v in loss_dict.items():
            self.log("train_" + k, v.item())

        return loss

    def validation_step(self, batch, batch_idx):
        loss, loss_dict = self.common_step(batch, batch_idx)     
        self.log("validation/loss", loss)
        for k, v in loss_dict.items():
            self.log("validation_" + k, v.item())
            
        return loss

    def configure_optimizers(self):
        # DETR authors decided to use different learning rate for backbone
        # you can learn more about it here: 
        # - https://github.com/facebookresearch/detr/blob/3af9fa878e73b6894ce3596450a8d9b89d918ca9/main.py#L22-L23
        # - https://github.com/facebookresearch/detr/blob/3af9fa878e73b6894ce3596450a8d9b89d918ca9/main.py#L131-L139
        param_dicts = [
            {
                "params": [p for n, p in self.named_parameters() if "backbone" not in n and p.requires_grad]},
            {
                "params": [p for n, p in self.named_parameters() if "backbone" in n and p.requires_grad],
                "lr": self.lr_backbone,
            },
        ]
        return torch.optim.AdamW(param_dicts, lr=self.lr, weight_decay=self.weight_decay)

    def train_dataloader(self):
        return TRAIN_DATALOADER

    def val_dataloader(self):
        return VAL_DATALOADER

model = Yolo(lr=1e-4, lr_backbone=1e-5, weight_decay=1e-4, num_classes=5)

!wandb login

# Commented out IPython magic to ensure Python compatibility.
# %env WANDB_PROJECT=plant-recognition

wandb.finish()

from google.colab import drive
drive.mount('/content/drive')

from pytorch_lightning import Trainer
import wandb

from pytorch_lightning.loggers import TensorBoardLogger, WandbLogger
from pytorch_lightning.callbacks import ModelCheckpoint

# settings
MAX_EPOCHS = 0

# pytorch_lightning < 2.0.0
# trainer = Trainer(gpus=1, max_epochs=MAX_EPOCHS, gradient_clip_val=0.1, accumulate_grad_batches=8, log_every_n_steps=5)
#logger = TensorBoardLogger("tb_logs", name="YOLO_plant")
#wandb.finish()
wandb_logger = WandbLogger(project="plant-recognition", log_model=True)
checkpoint_callback = ModelCheckpoint(monitor="validation/loss", mode="min")
# pytorch_lightning >= 2.0.0
# trainer = Trainer(default_root_dir="/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/" , devices=1, accelerator="gpu", max_epochs=MAX_EPOCHS, gradient_clip_val=0.1, accumulate_grad_batches=8, log_every_n_steps=5)
trainer = Trainer(default_root_dir="/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/" ,logger=wandb_logger, devices=1, accelerator="gpu", max_epochs=MAX_EPOCHS, gradient_clip_val=0.1, accumulate_grad_batches=8, log_every_n_steps=5)

trainer.fit(model)
trainer.save_model("/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/test")

torch.cuda.empty_cache()

!pip install numba

from numba import cuda
# all of your code and execution
cuda.select_device(0)
cuda.close()

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/facebookresearch/detr.git
# %cd /content/detr



model = Yolo.load_from_checkpoint("/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/example.ckpt", lr=1e-4, lr_backbone=1e-5, weight_decay=1e-4, num_classes=5).to("cuda")

from datasets import get_coco_api_from_dataset

base_ds = get_coco_api_from_dataset(val_dataset)

set PYTORCH_CUDA_ALLOC_CONF=garbage_collection_threshold:0.6,max_split_size_mb:128

from datasets.coco_eval import CocoEvaluator
from tqdm.notebook import tqdm


iou_types = ['bbox']
coco_evaluator = CocoEvaluator(base_ds, iou_types) # initialize evaluator with ground truths

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model.to(device)
model.eval()

print("Running evaluation...")
index = 0
for idx, batch in enumerate(tqdm(VAL_DATALOADER)):
    # get the inputs
    pixel_values = batch["pixel_values"].to(device)
    labels = [{k: v.to(device) for k, v in t.items()} for t in batch["labels"]] # these are in DETR format, resized + normalized

    # forward pass
    outputs = model(pixel_values=pixel_values)
    pixel_values.detach()
    orig_target_sizes = torch.stack([target["orig_size"] for target in labels], dim=0)
    results = feature_extractor.post_process(outputs, orig_target_sizes) # convert outputs of model to COCO api
    res = {target['image_id'].item(): output for target, output in zip(labels, results)}
    coco_evaluator.update(res)
    index = index + 1;
    torch.cuda.empty_cache()
    #if index == 20:
    #  break

coco_evaluator.synchronize_between_processes()
coco_evaluator.accumulate()
coco_evaluator.summarize()
#the evaluation here prints out mean average precision details
#learn more - https://blog.roboflow.com/mean-average-precision/

url = '/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/Data/flowers/daisy/8718637649_87a0d85190_n.jpg'

# url = "http://images.cocodataset.org/val2017/000000039769.jpg"

import torchvision.transforms as transforms
import torch
from PIL import Image
import requests

url = '/content/drive/MyDrive/VIP-Spring_2023-Plant_Recognition/Data/flowers/daisy/8718637649_87a0d85190_n.jpg'
#image = Image.open(requests.get(url, stream=True).raw)
image = Image.open(url)
transform = transforms.Compose([transforms.PILToTensor()])
tensor = transform(image).to("cuda")

inputs = feature_extractor(images=tensor, return_tensors="pt").to("cuda")
inputs = inputs.to("cuda")

outputs = model(**inputs)

# convert outputs (bounding boxes and class logits) to COCO API
target_sizes = torch.tensor([image.size[::-1]])
results = feature_extractor.post_process_object_detection(outputs, threshold=0.7, target_sizes=target_sizes)[0]

for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = [round(i, 2) for i in box.tolist()]
    print(
        f"Detected {id2label[label.item()]} with confidence "
        f"{round(score.item(), 3)} at location {box}"
    )

import matplotlib.pyplot as plt
import matplotlib.patches as patches

fig, ax = plt.subplots()
print(image.size)
ax.imshow(image)
for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = box.cpu().detach().numpy()
    rect = patches.Rectangle((box[0], box[1]), box[2] - box[0], box[3] - box[1], linewidth=1, edgecolor='b', facecolor='none')
    plt.text(box[0], box[1], f"{id2label[label.item()]}: {round(score.item() * 100, 1) }%", fontdict=None, color = 'w')
    ax.add_patch(rect)
# rect = patches.Rectangle((70,41), 120, 155, linewidth=2, edgecolor='b', facecolor='none')
# ax.add_patch(rect)

plt.show()